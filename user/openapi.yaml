openapi: 3.0.0
info:
  title: User Management API
  description: API for managing users, including customers and drivers
  version: 1.0.0

servers:
  - url: http://localhost/user
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      properties:
        firstName:
          type: string
          example: "João"
        lastName:
          type: string
          example: "Silva"
        email:
          type: string
          format: email
          example: "joao.silva@email.com"
        phone:
          type: string
          pattern: "^[0-9]{12}$"
          example: "351912345678"
        password:
          type: string
          format: password
          example: "senha123"
        role:
          type: string
          enum: [CUSTOMER, DRIVER, ADMIN]
          example: "CUSTOMER"
      required:
        - firstName
        - lastName
        - email
        - phone
        - password
        - role

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "joao.silva@email.com"
        password:
          type: string
          format: password
          example: "senha123"
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UserProfile:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: "8cce9e0c-49ad-49c5-8b72-b6ac34ddb40d"
        firstName:
          type: string
          example: "João"
        lastName:
          type: string
          example: "Silva"
        email:
          type: string
          format: email
          example: "joao.silva@email.com"
        phone:
          type: string
          example: "351912345678"
        role:
          type: string
          enum: [CUSTOMER, DRIVER, ADMIN]
          example: "CUSTOMER"

    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "joao.silva@email.com"
        oldPassword:
          type: string
          format: password
          example: "senha123"
        newPassword:
          type: string
          format: password
          example: "novaSenha456"
      required:
        - email
        - oldPassword
        - newPassword

security:
  - bearerAuth: []

paths:
  /register:
    post:
      summary: Register a new user (customer or driver)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input
        '409':
          description: Email already registered
        '500':
          description: Internal server error

  /login:
    post:
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error

  /me:
    get:
      summary: Get own profile
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /profile/{userId}:
    get:
      summary: Get specific user profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "8cce9e0c-49ad-49c5-8b72-b6ac34ddb40d"
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /reset-password:
    post:
      summary: Reset user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /users:
    get:
      summary: List all users (Admin only)
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '500':
          description: Internal server error

  /drivers:
    get:
      summary: List all drivers (Admin or Driver access)
      responses:
        '200':
          description: List of all drivers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions
        '500':
          description: Internal server error

  /customers:
    get:
      summary: List all customers (Admin only)
      responses:
        '200':
          description: List of all customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '500':
          description: Internal server error